(defvar CBW-HUTCHINSON-KNOPOFF #'(lambda (meanfreq) (* 1.72 (expt meanfreq 0.65))))
(defvar CBW-MOORE-GLASBERG #'(lambda (meanfreq) (+ (* 0.108 meanfreq) 24.7)))

(defun roughness-parncutt (freqs amps &key (cbwfn #'(lambda (meanfreq) (+ (* 0.108 meanfreq) 24.7)))
					(cbinterval0 0.25)
					(scindex 2.0))
  (multiple-value-bind (numerator denominator)
      (labels ((inner (f1 a1 freqs amps numerator denominator)
		 (labels ((inner-rec (f1 a1 freqs amps numerator counter)
			    (if (null freqs)
				(values numerator (if (> counter 0) (+ denominator (* a1 a1)) denominator))
				(if (<= a1 0.0)
				    (values numerator denominator)
				    (let ((f2 (car freqs))
					  (a2 (car amps)))
				      (if (> a2 0.)
					  (let ((ratio (/ (/ (abs (- f2 f1))
							     (funcall cbwfn (/ (+ f1 f2) 2.0)))
							  cbinterval0)))
					    (inner-rec f1
						       a1
						       (cdr freqs)
						       (cdr amps)
						       (+ numerator (* (* a1 a2)
								       (expt (* (* (exp 1.0) ratio) (exp (* -1.0 ratio)))
									     scindex)))
						       (+ counter 1)))
					  (inner-rec f1
						     a1
						     (cdr freqs)
						     (cdr amps)
						     numerator
						     0)))))))
		   (inner-rec f1 a1 freqs amps numerator 0)))
	       (outer (freqs amps)
		 (labels ((outer-rec (freqs amps numerator denominator)
			    (if (null freqs)
				(values numerator denominator)
				(multiple-value-call #'(lambda (numerator denominator) (outer-rec (cdr freqs) (cdr amps) numerator denominator))
				  (inner (car freqs) (car amps) (cdr freqs) (cdr amps) numerator denominator)))))
		   (outer-rec freqs amps 0 0))))
	(outer freqs amps))
    (if (> denominator 0.0)
	(/ numerator denominator)
	0.0)))
